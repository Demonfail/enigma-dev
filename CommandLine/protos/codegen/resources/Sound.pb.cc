// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Sound.proto

#include "resources/Sound.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace buffers {
namespace resources {
class SoundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sound>
      _instance;
} _Sound_default_instance_;
}  // namespace resources
}  // namespace buffers
namespace protobuf_resources_2fSound_2eproto {
void InitDefaultsSoundImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::buffers::resources::_Sound_default_instance_;
    new (ptr) ::buffers::resources::Sound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::buffers::resources::Sound::InitAsDefaultInstance();
}

void InitDefaultsSound() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSoundImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, preload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, pan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, file_extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, effects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, bit_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, sample_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, bit_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, compressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, streamed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, uncompress_on_load_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::buffers::resources::Sound, audio_group_),
  0,
  6,
  11,
  4,
  5,
  1,
  2,
  7,
  8,
  3,
  9,
  10,
  15,
  16,
  12,
  13,
  14,
  17,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, sizeof(::buffers::resources::Sound)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::buffers::resources::_Sound_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "resources/Sound.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025resources/Sound.proto\022\021buffers.resourc"
      "es\032\roptions.proto\"\334\005\n\005Sound\022\014\n\004name\030\001 \001("
      "\t\022\036\n\002id\030\002 \001(\005B\022\202\265\030\016GMX_DEPRECATED\022\017\n\007pre"
      "load\030\003 \001(\010\022\013\n\003pan\030\004 \001(\001\022!\n\006volume\030\005 \001(\001B"
      "\021\202\265\030\rvolume/volume\022\033\n\tfile_name\030\006 \001(\tB\010\202"
      "\265\030\004data\022%\n\016file_extension\030\007 \001(\tB\r\202\265\030\text"
      "ension\022+\n\004kind\030\010 \001(\0162\035.buffers.resources"
      ".Sound.Kind\022;\n\004type\030\t \001(\0162\035.buffers.reso"
      "urces.Sound.TypeB\016\202\265\030\ntypes/type\022\036\n\004data"
      "\030\n \001(\tB\020\202\265\030\010origname\230\265\030\001\022\017\n\007effects\030\013 \001("
      "\005\022&\n\010bit_rate\030\014 \001(\rB\024\202\265\030\020bitRates/bitRat"
      "e\022/\n\013sample_rate\030\r \001(\rB\032\202\265\030\026sampleRates/"
      "sampleRate\022)\n\tbit_depth\030\016 \001(\rB\026\202\265\030\022bitDe"
      "pths/bitDepth\022\022\n\ncompressed\030\017 \001(\010\022\020\n\010str"
      "eamed\030\020 \001(\010\0220\n\022uncompress_on_load\030\021 \001(\010B"
      "\024\202\265\030\020uncompressOnLoad\022#\n\013audio_group\030\022 \001"
      "(\005B\016\202\265\030\naudioGroup\"V\n\004Kind\022\n\n\006NORMAL\020\000\022\024"
      "\n\020BACKGROUND_MUSIC\020\001\022\025\n\021THREE_DIMENSIONA"
      "L\020\002\022\025\n\021MULTIMEDIA_PLAYER\020\003\",\n\004Type\022\010\n\004MO"
      "NO\020\000\022\n\n\006STEREO\020\001\022\016\n\nPOSITIONAL\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 792);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "resources/Sound.proto", &protobuf_RegisterTypes);
  ::protobuf_options_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_resources_2fSound_2eproto
namespace buffers {
namespace resources {
const ::google::protobuf::EnumDescriptor* Sound_Kind_descriptor() {
  protobuf_resources_2fSound_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fSound_2eproto::file_level_enum_descriptors[0];
}
bool Sound_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sound_Kind Sound::NORMAL;
const Sound_Kind Sound::BACKGROUND_MUSIC;
const Sound_Kind Sound::THREE_DIMENSIONAL;
const Sound_Kind Sound::MULTIMEDIA_PLAYER;
const Sound_Kind Sound::Kind_MIN;
const Sound_Kind Sound::Kind_MAX;
const int Sound::Kind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sound_Type_descriptor() {
  protobuf_resources_2fSound_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fSound_2eproto::file_level_enum_descriptors[1];
}
bool Sound_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sound_Type Sound::MONO;
const Sound_Type Sound::STEREO;
const Sound_Type Sound::POSITIONAL;
const Sound_Type Sound::Type_MIN;
const Sound_Type Sound::Type_MAX;
const int Sound::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Sound::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sound::kNameFieldNumber;
const int Sound::kIdFieldNumber;
const int Sound::kPreloadFieldNumber;
const int Sound::kPanFieldNumber;
const int Sound::kVolumeFieldNumber;
const int Sound::kFileNameFieldNumber;
const int Sound::kFileExtensionFieldNumber;
const int Sound::kKindFieldNumber;
const int Sound::kTypeFieldNumber;
const int Sound::kDataFieldNumber;
const int Sound::kEffectsFieldNumber;
const int Sound::kBitRateFieldNumber;
const int Sound::kSampleRateFieldNumber;
const int Sound::kBitDepthFieldNumber;
const int Sound::kCompressedFieldNumber;
const int Sound::kStreamedFieldNumber;
const int Sound::kUncompressOnLoadFieldNumber;
const int Sound::kAudioGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sound::Sound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_resources_2fSound_2eproto::InitDefaultsSound();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Sound)
}
Sound::Sound(const Sound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  file_extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_extension()) {
    file_extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_extension_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&pan_, &from.pan_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_group_) -
    reinterpret_cast<char*>(&pan_)) + sizeof(audio_group_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Sound)
}

void Sound::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_group_) -
      reinterpret_cast<char*>(&pan_)) + sizeof(audio_group_));
}

Sound::~Sound() {
  // @@protoc_insertion_point(destructor:buffers.resources.Sound)
  SharedDtor();
}

void Sound::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_extension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sound::descriptor() {
  ::protobuf_resources_2fSound_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_resources_2fSound_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sound& Sound::default_instance() {
  ::protobuf_resources_2fSound_2eproto::InitDefaultsSound();
  return *internal_default_instance();
}

Sound* Sound::New(::google::protobuf::Arena* arena) const {
  Sound* n = new Sound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sound::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Sound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!file_extension_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_extension_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&pan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kind_) -
        reinterpret_cast<char*>(&pan_)) + sizeof(kind_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sample_rate_) -
        reinterpret_cast<char*>(&type_)) + sizeof(sample_rate_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&bit_depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audio_group_) -
        reinterpret_cast<char*>(&bit_depth_)) + sizeof(audio_group_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Sound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Sound.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_preload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pan = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_pan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double volume = 5 [(.buffers.gmx) = "volume/volume"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 6 [(.buffers.gmx) = "data"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Sound.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_extension = 7 [(.buffers.gmx) = "extension"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_extension()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_extension().data(), static_cast<int>(this->file_extension().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Sound.file_extension");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Sound.Kind kind = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::buffers::resources::Sound_Kind_IsValid(value)) {
            set_kind(static_cast< ::buffers::resources::Sound_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Sound.Type type = 9 [(.buffers.gmx) = "types/type"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::buffers::resources::Sound_Type_IsValid(value)) {
            set_type(static_cast< ::buffers::resources::Sound_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data = 10 [(.buffers.gmx) = "origname", (.buffers.file_path) = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Sound.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 effects = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_effects();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bit_rate = 12 [(.buffers.gmx) = "bitRates/bitRate"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_bit_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bit_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sample_rate = 13 [(.buffers.gmx) = "sampleRates/sampleRate"];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_sample_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bit_depth = 14 [(.buffers.gmx) = "bitDepths/bitDepth"];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_bit_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bit_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compressed = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_compressed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool streamed = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_streamed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streamed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool uncompress_on_load = 17 [(.buffers.gmx) = "uncompressOnLoad"];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_uncompress_on_load();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uncompress_on_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audio_group = 18 [(.buffers.gmx) = "audioGroup"];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_audio_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Sound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Sound)
  return false;
#undef DO_
}

void Sound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Sound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional bool preload = 3;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->preload(), output);
  }

  // optional double pan = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pan(), output);
  }

  // optional double volume = 5 [(.buffers.gmx) = "volume/volume"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->volume(), output);
  }

  // optional string file_name = 6 [(.buffers.gmx) = "data"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->file_name(), output);
  }

  // optional string file_extension = 7 [(.buffers.gmx) = "extension"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_extension().data(), static_cast<int>(this->file_extension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.file_extension");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->file_extension(), output);
  }

  // optional .buffers.resources.Sound.Kind kind = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->kind(), output);
  }

  // optional .buffers.resources.Sound.Type type = 9 [(.buffers.gmx) = "types/type"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional string data = 10 [(.buffers.gmx) = "origname", (.buffers.file_path) = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->data(), output);
  }

  // optional int32 effects = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->effects(), output);
  }

  // optional uint32 bit_rate = 12 [(.buffers.gmx) = "bitRates/bitRate"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->bit_rate(), output);
  }

  // optional uint32 sample_rate = 13 [(.buffers.gmx) = "sampleRates/sampleRate"];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->sample_rate(), output);
  }

  // optional uint32 bit_depth = 14 [(.buffers.gmx) = "bitDepths/bitDepth"];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->bit_depth(), output);
  }

  // optional bool compressed = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->compressed(), output);
  }

  // optional bool streamed = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->streamed(), output);
  }

  // optional bool uncompress_on_load = 17 [(.buffers.gmx) = "uncompressOnLoad"];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->uncompress_on_load(), output);
  }

  // optional int32 audio_group = 18 [(.buffers.gmx) = "audioGroup"];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->audio_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Sound)
}

::google::protobuf::uint8* Sound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Sound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional bool preload = 3;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->preload(), target);
  }

  // optional double pan = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pan(), target);
  }

  // optional double volume = 5 [(.buffers.gmx) = "volume/volume"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->volume(), target);
  }

  // optional string file_name = 6 [(.buffers.gmx) = "data"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->file_name(), target);
  }

  // optional string file_extension = 7 [(.buffers.gmx) = "extension"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_extension().data(), static_cast<int>(this->file_extension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.file_extension");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->file_extension(), target);
  }

  // optional .buffers.resources.Sound.Kind kind = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->kind(), target);
  }

  // optional .buffers.resources.Sound.Type type = 9 [(.buffers.gmx) = "types/type"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional string data = 10 [(.buffers.gmx) = "origname", (.buffers.file_path) = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->data(), target);
  }

  // optional int32 effects = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->effects(), target);
  }

  // optional uint32 bit_rate = 12 [(.buffers.gmx) = "bitRates/bitRate"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->bit_rate(), target);
  }

  // optional uint32 sample_rate = 13 [(.buffers.gmx) = "sampleRates/sampleRate"];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->sample_rate(), target);
  }

  // optional uint32 bit_depth = 14 [(.buffers.gmx) = "bitDepths/bitDepth"];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->bit_depth(), target);
  }

  // optional bool compressed = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->compressed(), target);
  }

  // optional bool streamed = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->streamed(), target);
  }

  // optional bool uncompress_on_load = 17 [(.buffers.gmx) = "uncompressOnLoad"];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->uncompress_on_load(), target);
  }

  // optional int32 audio_group = 18 [(.buffers.gmx) = "audioGroup"];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->audio_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Sound)
  return target;
}

size_t Sound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Sound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string file_name = 6 [(.buffers.gmx) = "data"];
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string file_extension = 7 [(.buffers.gmx) = "extension"];
    if (has_file_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_extension());
    }

    // optional string data = 10 [(.buffers.gmx) = "origname", (.buffers.file_path) = true];
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional double pan = 4;
    if (has_pan()) {
      total_size += 1 + 8;
    }

    // optional double volume = 5 [(.buffers.gmx) = "volume/volume"];
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .buffers.resources.Sound.Kind kind = 8;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .buffers.resources.Sound.Type type = 9 [(.buffers.gmx) = "types/type"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 effects = 11;
    if (has_effects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effects());
    }

    // optional uint32 bit_rate = 12 [(.buffers.gmx) = "bitRates/bitRate"];
    if (has_bit_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bit_rate());
    }

    // optional bool preload = 3;
    if (has_preload()) {
      total_size += 1 + 1;
    }

    // optional bool compressed = 15;
    if (has_compressed()) {
      total_size += 1 + 1;
    }

    // optional bool streamed = 16;
    if (has_streamed()) {
      total_size += 2 + 1;
    }

    // optional bool uncompress_on_load = 17 [(.buffers.gmx) = "uncompressOnLoad"];
    if (has_uncompress_on_load()) {
      total_size += 2 + 1;
    }

    // optional uint32 sample_rate = 13 [(.buffers.gmx) = "sampleRates/sampleRate"];
    if (has_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_rate());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional uint32 bit_depth = 14 [(.buffers.gmx) = "bitDepths/bitDepth"];
    if (has_bit_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bit_depth());
    }

    // optional int32 audio_group = 18 [(.buffers.gmx) = "audioGroup"];
    if (has_audio_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audio_group());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Sound)
  GOOGLE_DCHECK_NE(&from, this);
  const Sound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Sound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Sound)
    MergeFrom(*source);
  }
}

void Sound::MergeFrom(const Sound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Sound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_file_extension();
      file_extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_extension_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000010u) {
      pan_ = from.pan_;
    }
    if (cached_has_bits & 0x00000020u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      kind_ = from.kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      effects_ = from.effects_;
    }
    if (cached_has_bits & 0x00000400u) {
      bit_rate_ = from.bit_rate_;
    }
    if (cached_has_bits & 0x00000800u) {
      preload_ = from.preload_;
    }
    if (cached_has_bits & 0x00001000u) {
      compressed_ = from.compressed_;
    }
    if (cached_has_bits & 0x00002000u) {
      streamed_ = from.streamed_;
    }
    if (cached_has_bits & 0x00004000u) {
      uncompress_on_load_ = from.uncompress_on_load_;
    }
    if (cached_has_bits & 0x00008000u) {
      sample_rate_ = from.sample_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      bit_depth_ = from.bit_depth_;
    }
    if (cached_has_bits & 0x00020000u) {
      audio_group_ = from.audio_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Sound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sound::CopyFrom(const Sound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Sound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sound::IsInitialized() const {
  return true;
}

void Sound::Swap(Sound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sound::InternalSwap(Sound* other) {
  using std::swap;
  name_.Swap(&other->name_);
  file_name_.Swap(&other->file_name_);
  file_extension_.Swap(&other->file_extension_);
  data_.Swap(&other->data_);
  swap(pan_, other->pan_);
  swap(volume_, other->volume_);
  swap(id_, other->id_);
  swap(kind_, other->kind_);
  swap(type_, other->type_);
  swap(effects_, other->effects_);
  swap(bit_rate_, other->bit_rate_);
  swap(preload_, other->preload_);
  swap(compressed_, other->compressed_);
  swap(streamed_, other->streamed_);
  swap(uncompress_on_load_, other->uncompress_on_load_);
  swap(sample_rate_, other->sample_rate_);
  swap(bit_depth_, other->bit_depth_);
  swap(audio_group_, other->audio_group_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sound::GetMetadata() const {
  protobuf_resources_2fSound_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_resources_2fSound_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace buffers

// @@protoc_insertion_point(global_scope)
