// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Event.proto

#ifndef PROTOBUF_resources_2fEvent_2eproto__INCLUDED
#define PROTOBUF_resources_2fEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_resources_2fEvent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsArgumentImpl();
void InitDefaultsArgument();
void InitDefaultsActionImpl();
void InitDefaultsAction();
void InitDefaultsEventImpl();
void InitDefaultsEvent();
inline void InitDefaults() {
  InitDefaultsArgument();
  InitDefaultsAction();
  InitDefaultsEvent();
}
}  // namespace protobuf_resources_2fEvent_2eproto
namespace buffers {
namespace resources {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class Argument;
class ArgumentDefaultTypeInternal;
extern ArgumentDefaultTypeInternal _Argument_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace resources
}  // namespace buffers
namespace buffers {
namespace resources {

enum ArgumentKind {
  ARG_EXPRESSION = 0,
  ARG_STRING = 1,
  ARG_BOTH = 2,
  ARG_BOOLEAN = 3,
  ARG_MENU = 4,
  ARG_COLOR = 13,
  ARG_FONTSTRING = 15,
  ARG_SPRITE = 5,
  ARG_SOUND = 6,
  ARG_BACKGROUND = 7,
  ARG_PATH = 8,
  ARG_SCRIPT = 9,
  ARG_OBJECT = 10,
  ARG_ROOM = 11,
  ARG_FONT = 12,
  ARG_TIMELINE = 14
};
bool ArgumentKind_IsValid(int value);
const ArgumentKind ArgumentKind_MIN = ARG_EXPRESSION;
const ArgumentKind ArgumentKind_MAX = ARG_FONTSTRING;
const int ArgumentKind_ARRAYSIZE = ArgumentKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArgumentKind_descriptor();
inline const ::std::string& ArgumentKind_Name(ArgumentKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArgumentKind_descriptor(), value);
}
inline bool ArgumentKind_Parse(
    const ::std::string& name, ArgumentKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArgumentKind>(
    ArgumentKind_descriptor(), name, value);
}
enum ActionKind {
  ACT_NORMAL = 0,
  ACT_BEGIN = 1,
  ACT_END = 2,
  ACT_ELSE = 3,
  ACT_EXIT = 4,
  ACT_REPEAT = 5,
  ACT_VARIABLE = 6,
  ACT_CODE = 7,
  ACT_PLACEHOLDER = 8,
  ACT_SEPARATOR = 9,
  ACT_LABEL = 10
};
bool ActionKind_IsValid(int value);
const ActionKind ActionKind_MIN = ACT_NORMAL;
const ActionKind ActionKind_MAX = ACT_LABEL;
const int ActionKind_ARRAYSIZE = ActionKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionKind_descriptor();
inline const ::std::string& ActionKind_Name(ActionKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionKind_descriptor(), value);
}
inline bool ActionKind_Parse(
    const ::std::string& name, ActionKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionKind>(
    ActionKind_descriptor(), name, value);
}
enum ActionExecution {
  EXEC_NONE = 0,
  EXEC_FUNCTION = 1,
  EXEC_CODE = 2
};
bool ActionExecution_IsValid(int value);
const ActionExecution ActionExecution_MIN = EXEC_NONE;
const ActionExecution ActionExecution_MAX = EXEC_CODE;
const int ActionExecution_ARRAYSIZE = ActionExecution_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionExecution_descriptor();
inline const ::std::string& ActionExecution_Name(ActionExecution value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionExecution_descriptor(), value);
}
inline bool ActionExecution_Parse(
    const ::std::string& name, ActionExecution* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionExecution>(
    ActionExecution_descriptor(), name, value);
}
// ===================================================================

class Argument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Argument) */ {
 public:
  Argument();
  virtual ~Argument();

  Argument(const Argument& from);

  inline Argument& operator=(const Argument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Argument(Argument&& from) noexcept
    : Argument() {
    *this = ::std::move(from);
  }

  inline Argument& operator=(Argument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Argument& default_instance();

  enum ValueCase {
    kString = 2,
    kSprite = 3,
    kSound = 4,
    kBackground = 5,
    kPath = 6,
    kScript = 7,
    kObject = 8,
    kRoom = 9,
    kFont = 10,
    kTimeline = 11,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Argument* internal_default_instance() {
    return reinterpret_cast<const Argument*>(
               &_Argument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Argument* other);
  friend void swap(Argument& a, Argument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Argument* New() const PROTOBUF_FINAL { return New(NULL); }

  Argument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Argument& from);
  void MergeFrom(const Argument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Argument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .buffers.resources.ArgumentKind kind = 1;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  ::buffers::resources::ArgumentKind kind() const;
  void set_kind(::buffers::resources::ArgumentKind value);

  // optional string string = 2;
  bool has_string() const;
  void clear_string();
  static const int kStringFieldNumber = 2;
  const ::std::string& string() const;
  void set_string(const ::std::string& value);
  #if LANG_CXX11
  void set_string(::std::string&& value);
  #endif
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  ::std::string* mutable_string();
  ::std::string* release_string();
  void set_allocated_string(::std::string* string);

  // optional string sprite = 3;
  bool has_sprite() const;
  void clear_sprite();
  static const int kSpriteFieldNumber = 3;
  const ::std::string& sprite() const;
  void set_sprite(const ::std::string& value);
  #if LANG_CXX11
  void set_sprite(::std::string&& value);
  #endif
  void set_sprite(const char* value);
  void set_sprite(const char* value, size_t size);
  ::std::string* mutable_sprite();
  ::std::string* release_sprite();
  void set_allocated_sprite(::std::string* sprite);

  // optional string sound = 4;
  bool has_sound() const;
  void clear_sound();
  static const int kSoundFieldNumber = 4;
  const ::std::string& sound() const;
  void set_sound(const ::std::string& value);
  #if LANG_CXX11
  void set_sound(::std::string&& value);
  #endif
  void set_sound(const char* value);
  void set_sound(const char* value, size_t size);
  ::std::string* mutable_sound();
  ::std::string* release_sound();
  void set_allocated_sound(::std::string* sound);

  // optional string background = 5;
  bool has_background() const;
  void clear_background();
  static const int kBackgroundFieldNumber = 5;
  const ::std::string& background() const;
  void set_background(const ::std::string& value);
  #if LANG_CXX11
  void set_background(::std::string&& value);
  #endif
  void set_background(const char* value);
  void set_background(const char* value, size_t size);
  ::std::string* mutable_background();
  ::std::string* release_background();
  void set_allocated_background(::std::string* background);

  // optional string path = 6;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 6;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string script = 7;
  bool has_script() const;
  void clear_script();
  static const int kScriptFieldNumber = 7;
  const ::std::string& script() const;
  void set_script(const ::std::string& value);
  #if LANG_CXX11
  void set_script(::std::string&& value);
  #endif
  void set_script(const char* value);
  void set_script(const char* value, size_t size);
  ::std::string* mutable_script();
  ::std::string* release_script();
  void set_allocated_script(::std::string* script);

  // optional string object = 8;
  bool has_object() const;
  void clear_object();
  static const int kObjectFieldNumber = 8;
  const ::std::string& object() const;
  void set_object(const ::std::string& value);
  #if LANG_CXX11
  void set_object(::std::string&& value);
  #endif
  void set_object(const char* value);
  void set_object(const char* value, size_t size);
  ::std::string* mutable_object();
  ::std::string* release_object();
  void set_allocated_object(::std::string* object);

  // optional string room = 9;
  bool has_room() const;
  void clear_room();
  static const int kRoomFieldNumber = 9;
  const ::std::string& room() const;
  void set_room(const ::std::string& value);
  #if LANG_CXX11
  void set_room(::std::string&& value);
  #endif
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  ::std::string* mutable_room();
  ::std::string* release_room();
  void set_allocated_room(::std::string* room);

  // optional string font = 10;
  bool has_font() const;
  void clear_font();
  static const int kFontFieldNumber = 10;
  const ::std::string& font() const;
  void set_font(const ::std::string& value);
  #if LANG_CXX11
  void set_font(::std::string&& value);
  #endif
  void set_font(const char* value);
  void set_font(const char* value, size_t size);
  ::std::string* mutable_font();
  ::std::string* release_font();
  void set_allocated_font(::std::string* font);

  // optional string timeline = 11;
  bool has_timeline() const;
  void clear_timeline();
  static const int kTimelineFieldNumber = 11;
  const ::std::string& timeline() const;
  void set_timeline(const ::std::string& value);
  #if LANG_CXX11
  void set_timeline(::std::string&& value);
  #endif
  void set_timeline(const char* value);
  void set_timeline(const char* value, size_t size);
  ::std::string* mutable_timeline();
  ::std::string* release_timeline();
  void set_allocated_timeline(::std::string* timeline);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:buffers.resources.Argument)
 private:
  void set_has_kind();
  void clear_has_kind();
  void set_has_string();
  void set_has_sprite();
  void set_has_sound();
  void set_has_background();
  void set_has_path();
  void set_has_script();
  void set_has_object();
  void set_has_room();
  void set_has_font();
  void set_has_timeline();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int kind_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr string_;
    ::google::protobuf::internal::ArenaStringPtr sprite_;
    ::google::protobuf::internal::ArenaStringPtr sound_;
    ::google::protobuf::internal::ArenaStringPtr background_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr script_;
    ::google::protobuf::internal::ArenaStringPtr object_;
    ::google::protobuf::internal::ArenaStringPtr room_;
    ::google::protobuf::internal::ArenaStringPtr font_;
    ::google::protobuf::internal::ArenaStringPtr timeline_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_resources_2fEvent_2eproto::TableStruct;
  friend void ::protobuf_resources_2fEvent_2eproto::InitDefaultsArgumentImpl();
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Action* other);
  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const PROTOBUF_FINAL { return New(NULL); }

  Action* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Action* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .buffers.resources.Argument arguments = 13 [(.buffers.gmx) = "arguments/argument"];
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 13;
  const ::buffers::resources::Argument& arguments(int index) const;
  ::buffers::resources::Argument* mutable_arguments(int index);
  ::buffers::resources::Argument* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Argument >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Argument >&
      arguments() const;

  // optional string function_name = 8 [(.buffers.gmx) = "functionname"];
  bool has_function_name() const;
  void clear_function_name();
  static const int kFunctionNameFieldNumber = 8;
  const ::std::string& function_name() const;
  void set_function_name(const ::std::string& value);
  #if LANG_CXX11
  void set_function_name(::std::string&& value);
  #endif
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  ::std::string* mutable_function_name();
  ::std::string* release_function_name();
  void set_allocated_function_name(::std::string* function_name);

  // optional string code_string = 9 [(.buffers.gmx) = "codestring"];
  bool has_code_string() const;
  void clear_code_string();
  static const int kCodeStringFieldNumber = 9;
  const ::std::string& code_string() const;
  void set_code_string(const ::std::string& value);
  #if LANG_CXX11
  void set_code_string(::std::string&& value);
  #endif
  void set_code_string(const char* value);
  void set_code_string(const char* value, size_t size);
  ::std::string* mutable_code_string();
  ::std::string* release_code_string();
  void set_allocated_code_string(::std::string* code_string);

  // optional string who_name = 10 [(.buffers.gmx) = "whoName"];
  bool has_who_name() const;
  void clear_who_name();
  static const int kWhoNameFieldNumber = 10;
  const ::std::string& who_name() const;
  void set_who_name(const ::std::string& value);
  #if LANG_CXX11
  void set_who_name(::std::string&& value);
  #endif
  void set_who_name(const char* value);
  void set_who_name(const char* value, size_t size);
  ::std::string* mutable_who_name();
  ::std::string* release_who_name();
  void set_allocated_who_name(::std::string* who_name);

  // optional int32 libid = 1;
  bool has_libid() const;
  void clear_libid();
  static const int kLibidFieldNumber = 1;
  ::google::protobuf::int32 libid() const;
  void set_libid(::google::protobuf::int32 value);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .buffers.resources.ActionKind kind = 3;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 3;
  ::buffers::resources::ActionKind kind() const;
  void set_kind(::buffers::resources::ActionKind value);

  // optional bool use_relative = 4 [(.buffers.gmx) = "userelative"];
  bool has_use_relative() const;
  void clear_use_relative();
  static const int kUseRelativeFieldNumber = 4;
  bool use_relative() const;
  void set_use_relative(bool value);

  // optional bool is_question = 5 [(.buffers.gmx) = "isquestion"];
  bool has_is_question() const;
  void clear_is_question();
  static const int kIsQuestionFieldNumber = 5;
  bool is_question() const;
  void set_is_question(bool value);

  // optional bool use_apply_to = 6 [(.buffers.gmx) = "useapplyto"];
  bool has_use_apply_to() const;
  void clear_use_apply_to();
  static const int kUseApplyToFieldNumber = 6;
  bool use_apply_to() const;
  void set_use_apply_to(bool value);

  // optional bool relative = 11;
  bool has_relative() const;
  void clear_relative();
  static const int kRelativeFieldNumber = 11;
  bool relative() const;
  void set_relative(bool value);

  // optional .buffers.resources.ActionExecution exe_type = 7 [(.buffers.gmx) = "exetype"];
  bool has_exe_type() const;
  void clear_exe_type();
  static const int kExeTypeFieldNumber = 7;
  ::buffers::resources::ActionExecution exe_type() const;
  void set_exe_type(::buffers::resources::ActionExecution value);

  // optional bool is_not = 12 [(.buffers.gmx) = "isnot"];
  bool has_is_not() const;
  void clear_is_not();
  static const int kIsNotFieldNumber = 12;
  bool is_not() const;
  void set_is_not(bool value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Action)
 private:
  void set_has_libid();
  void clear_has_libid();
  void set_has_id();
  void clear_has_id();
  void set_has_kind();
  void clear_has_kind();
  void set_has_use_relative();
  void clear_has_use_relative();
  void set_has_is_question();
  void clear_has_is_question();
  void set_has_use_apply_to();
  void clear_has_use_apply_to();
  void set_has_exe_type();
  void clear_has_exe_type();
  void set_has_function_name();
  void clear_has_function_name();
  void set_has_code_string();
  void clear_has_code_string();
  void set_has_who_name();
  void clear_has_who_name();
  void set_has_relative();
  void clear_has_relative();
  void set_has_is_not();
  void clear_has_is_not();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Argument > arguments_;
  ::google::protobuf::internal::ArenaStringPtr function_name_;
  ::google::protobuf::internal::ArenaStringPtr code_string_;
  ::google::protobuf::internal::ArenaStringPtr who_name_;
  ::google::protobuf::int32 libid_;
  ::google::protobuf::int32 id_;
  int kind_;
  bool use_relative_;
  bool is_question_;
  bool use_apply_to_;
  bool relative_;
  int exe_type_;
  bool is_not_;
  friend struct ::protobuf_resources_2fEvent_2eproto::TableStruct;
  friend void ::protobuf_resources_2fEvent_2eproto::InitDefaultsActionImpl();
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .buffers.resources.Action actions = 4 [(.buffers.gmx) = "action"];
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 4;
  const ::buffers::resources::Action& actions(int index) const;
  ::buffers::resources::Action* mutable_actions(int index);
  ::buffers::resources::Action* add_actions();
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Action >*
      mutable_actions();
  const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Action >&
      actions() const;

  // optional string name = 3 [(.buffers.gmx) = "ename"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional int32 type = 1 [(.buffers.gmx) = "eventtype"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 number = 2 [(.buffers.gmx) = "enumb"];
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 2;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Event)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_number();
  void clear_has_number();
  void set_has_name();
  void clear_has_name();
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Action > actions_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 number_;
  friend struct ::protobuf_resources_2fEvent_2eproto::TableStruct;
  friend void ::protobuf_resources_2fEvent_2eproto::InitDefaultsEventImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Argument

// optional .buffers.resources.ArgumentKind kind = 1;
inline bool Argument::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Argument::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Argument::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Argument::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::buffers::resources::ArgumentKind Argument::kind() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.kind)
  return static_cast< ::buffers::resources::ArgumentKind >(kind_);
}
inline void Argument::set_kind(::buffers::resources::ArgumentKind value) {
  assert(::buffers::resources::ArgumentKind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.kind)
}

// optional string string = 2;
inline bool Argument::has_string() const {
  return value_case() == kString;
}
inline void Argument::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void Argument::clear_string() {
  if (has_string()) {
    value_.string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Argument::string() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.string)
  if (has_string()) {
    return value_.string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Argument::set_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.string)
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.string)
}
#if LANG_CXX11
inline void Argument::set_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.string)
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Argument.string)
}
#endif
inline void Argument::set_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Argument.string)
}
inline void Argument::set_string(const char* value, size_t size) {
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Argument.string)
}
inline ::std::string* Argument::mutable_string() {
  if (!has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:buffers.resources.Argument.string)
  return value_.string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_string() {
  // @@protoc_insertion_point(field_release:buffers.resources.Argument.string)
  if (has_string()) {
    clear_has_value();
    return value_.string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Argument::set_allocated_string(::std::string* string) {
  if (!has_string()) {
    value_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string != NULL) {
    set_has_string();
    value_.string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string);
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Argument.string)
}

// optional string sprite = 3;
inline bool Argument::has_sprite() const {
  return value_case() == kSprite;
}
inline void Argument::set_has_sprite() {
  _oneof_case_[0] = kSprite;
}
inline void Argument::clear_sprite() {
  if (has_sprite()) {
    value_.sprite_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Argument::sprite() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.sprite)
  if (has_sprite()) {
    return value_.sprite_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Argument::set_sprite(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.sprite)
  if (!has_sprite()) {
    clear_value();
    set_has_sprite();
    value_.sprite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sprite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.sprite)
}
#if LANG_CXX11
inline void Argument::set_sprite(::std::string&& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.sprite)
  if (!has_sprite()) {
    clear_value();
    set_has_sprite();
    value_.sprite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sprite_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Argument.sprite)
}
#endif
inline void Argument::set_sprite(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_sprite()) {
    clear_value();
    set_has_sprite();
    value_.sprite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sprite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Argument.sprite)
}
inline void Argument::set_sprite(const char* value, size_t size) {
  if (!has_sprite()) {
    clear_value();
    set_has_sprite();
    value_.sprite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sprite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Argument.sprite)
}
inline ::std::string* Argument::mutable_sprite() {
  if (!has_sprite()) {
    clear_value();
    set_has_sprite();
    value_.sprite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:buffers.resources.Argument.sprite)
  return value_.sprite_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_sprite() {
  // @@protoc_insertion_point(field_release:buffers.resources.Argument.sprite)
  if (has_sprite()) {
    clear_has_value();
    return value_.sprite_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Argument::set_allocated_sprite(::std::string* sprite) {
  if (!has_sprite()) {
    value_.sprite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (sprite != NULL) {
    set_has_sprite();
    value_.sprite_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        sprite);
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Argument.sprite)
}

// optional string sound = 4;
inline bool Argument::has_sound() const {
  return value_case() == kSound;
}
inline void Argument::set_has_sound() {
  _oneof_case_[0] = kSound;
}
inline void Argument::clear_sound() {
  if (has_sound()) {
    value_.sound_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Argument::sound() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.sound)
  if (has_sound()) {
    return value_.sound_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Argument::set_sound(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.sound)
  if (!has_sound()) {
    clear_value();
    set_has_sound();
    value_.sound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.sound)
}
#if LANG_CXX11
inline void Argument::set_sound(::std::string&& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.sound)
  if (!has_sound()) {
    clear_value();
    set_has_sound();
    value_.sound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sound_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Argument.sound)
}
#endif
inline void Argument::set_sound(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_sound()) {
    clear_value();
    set_has_sound();
    value_.sound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Argument.sound)
}
inline void Argument::set_sound(const char* value, size_t size) {
  if (!has_sound()) {
    clear_value();
    set_has_sound();
    value_.sound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.sound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Argument.sound)
}
inline ::std::string* Argument::mutable_sound() {
  if (!has_sound()) {
    clear_value();
    set_has_sound();
    value_.sound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:buffers.resources.Argument.sound)
  return value_.sound_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_sound() {
  // @@protoc_insertion_point(field_release:buffers.resources.Argument.sound)
  if (has_sound()) {
    clear_has_value();
    return value_.sound_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Argument::set_allocated_sound(::std::string* sound) {
  if (!has_sound()) {
    value_.sound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (sound != NULL) {
    set_has_sound();
    value_.sound_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        sound);
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Argument.sound)
}

// optional string background = 5;
inline bool Argument::has_background() const {
  return value_case() == kBackground;
}
inline void Argument::set_has_background() {
  _oneof_case_[0] = kBackground;
}
inline void Argument::clear_background() {
  if (has_background()) {
    value_.background_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Argument::background() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.background)
  if (has_background()) {
    return value_.background_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Argument::set_background(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.background)
  if (!has_background()) {
    clear_value();
    set_has_background();
    value_.background_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.background_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.background)
}
#if LANG_CXX11
inline void Argument::set_background(::std::string&& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.background)
  if (!has_background()) {
    clear_value();
    set_has_background();
    value_.background_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.background_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Argument.background)
}
#endif
inline void Argument::set_background(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_background()) {
    clear_value();
    set_has_background();
    value_.background_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.background_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Argument.background)
}
inline void Argument::set_background(const char* value, size_t size) {
  if (!has_background()) {
    clear_value();
    set_has_background();
    value_.background_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.background_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Argument.background)
}
inline ::std::string* Argument::mutable_background() {
  if (!has_background()) {
    clear_value();
    set_has_background();
    value_.background_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:buffers.resources.Argument.background)
  return value_.background_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_background() {
  // @@protoc_insertion_point(field_release:buffers.resources.Argument.background)
  if (has_background()) {
    clear_has_value();
    return value_.background_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Argument::set_allocated_background(::std::string* background) {
  if (!has_background()) {
    value_.background_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (background != NULL) {
    set_has_background();
    value_.background_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        background);
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Argument.background)
}

// optional string path = 6;
inline bool Argument::has_path() const {
  return value_case() == kPath;
}
inline void Argument::set_has_path() {
  _oneof_case_[0] = kPath;
}
inline void Argument::clear_path() {
  if (has_path()) {
    value_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Argument::path() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.path)
  if (has_path()) {
    return value_.path_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Argument::set_path(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.path)
  if (!has_path()) {
    clear_value();
    set_has_path();
    value_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.path)
}
#if LANG_CXX11
inline void Argument::set_path(::std::string&& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.path)
  if (!has_path()) {
    clear_value();
    set_has_path();
    value_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Argument.path)
}
#endif
inline void Argument::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_path()) {
    clear_value();
    set_has_path();
    value_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Argument.path)
}
inline void Argument::set_path(const char* value, size_t size) {
  if (!has_path()) {
    clear_value();
    set_has_path();
    value_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Argument.path)
}
inline ::std::string* Argument::mutable_path() {
  if (!has_path()) {
    clear_value();
    set_has_path();
    value_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:buffers.resources.Argument.path)
  return value_.path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_path() {
  // @@protoc_insertion_point(field_release:buffers.resources.Argument.path)
  if (has_path()) {
    clear_has_value();
    return value_.path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Argument::set_allocated_path(::std::string* path) {
  if (!has_path()) {
    value_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (path != NULL) {
    set_has_path();
    value_.path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        path);
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Argument.path)
}

// optional string script = 7;
inline bool Argument::has_script() const {
  return value_case() == kScript;
}
inline void Argument::set_has_script() {
  _oneof_case_[0] = kScript;
}
inline void Argument::clear_script() {
  if (has_script()) {
    value_.script_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Argument::script() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.script)
  if (has_script()) {
    return value_.script_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Argument::set_script(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.script)
  if (!has_script()) {
    clear_value();
    set_has_script();
    value_.script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.script)
}
#if LANG_CXX11
inline void Argument::set_script(::std::string&& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.script)
  if (!has_script()) {
    clear_value();
    set_has_script();
    value_.script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.script_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Argument.script)
}
#endif
inline void Argument::set_script(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_script()) {
    clear_value();
    set_has_script();
    value_.script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Argument.script)
}
inline void Argument::set_script(const char* value, size_t size) {
  if (!has_script()) {
    clear_value();
    set_has_script();
    value_.script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.script_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Argument.script)
}
inline ::std::string* Argument::mutable_script() {
  if (!has_script()) {
    clear_value();
    set_has_script();
    value_.script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:buffers.resources.Argument.script)
  return value_.script_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_script() {
  // @@protoc_insertion_point(field_release:buffers.resources.Argument.script)
  if (has_script()) {
    clear_has_value();
    return value_.script_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Argument::set_allocated_script(::std::string* script) {
  if (!has_script()) {
    value_.script_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (script != NULL) {
    set_has_script();
    value_.script_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        script);
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Argument.script)
}

// optional string object = 8;
inline bool Argument::has_object() const {
  return value_case() == kObject;
}
inline void Argument::set_has_object() {
  _oneof_case_[0] = kObject;
}
inline void Argument::clear_object() {
  if (has_object()) {
    value_.object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Argument::object() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.object)
  if (has_object()) {
    return value_.object_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Argument::set_object(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.object)
  if (!has_object()) {
    clear_value();
    set_has_object();
    value_.object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.object)
}
#if LANG_CXX11
inline void Argument::set_object(::std::string&& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.object)
  if (!has_object()) {
    clear_value();
    set_has_object();
    value_.object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Argument.object)
}
#endif
inline void Argument::set_object(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_object()) {
    clear_value();
    set_has_object();
    value_.object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Argument.object)
}
inline void Argument::set_object(const char* value, size_t size) {
  if (!has_object()) {
    clear_value();
    set_has_object();
    value_.object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Argument.object)
}
inline ::std::string* Argument::mutable_object() {
  if (!has_object()) {
    clear_value();
    set_has_object();
    value_.object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:buffers.resources.Argument.object)
  return value_.object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_object() {
  // @@protoc_insertion_point(field_release:buffers.resources.Argument.object)
  if (has_object()) {
    clear_has_value();
    return value_.object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Argument::set_allocated_object(::std::string* object) {
  if (!has_object()) {
    value_.object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (object != NULL) {
    set_has_object();
    value_.object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        object);
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Argument.object)
}

// optional string room = 9;
inline bool Argument::has_room() const {
  return value_case() == kRoom;
}
inline void Argument::set_has_room() {
  _oneof_case_[0] = kRoom;
}
inline void Argument::clear_room() {
  if (has_room()) {
    value_.room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Argument::room() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.room)
  if (has_room()) {
    return value_.room_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Argument::set_room(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.room)
  if (!has_room()) {
    clear_value();
    set_has_room();
    value_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.room)
}
#if LANG_CXX11
inline void Argument::set_room(::std::string&& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.room)
  if (!has_room()) {
    clear_value();
    set_has_room();
    value_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.room_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Argument.room)
}
#endif
inline void Argument::set_room(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_room()) {
    clear_value();
    set_has_room();
    value_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Argument.room)
}
inline void Argument::set_room(const char* value, size_t size) {
  if (!has_room()) {
    clear_value();
    set_has_room();
    value_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Argument.room)
}
inline ::std::string* Argument::mutable_room() {
  if (!has_room()) {
    clear_value();
    set_has_room();
    value_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:buffers.resources.Argument.room)
  return value_.room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_room() {
  // @@protoc_insertion_point(field_release:buffers.resources.Argument.room)
  if (has_room()) {
    clear_has_value();
    return value_.room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Argument::set_allocated_room(::std::string* room) {
  if (!has_room()) {
    value_.room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (room != NULL) {
    set_has_room();
    value_.room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        room);
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Argument.room)
}

// optional string font = 10;
inline bool Argument::has_font() const {
  return value_case() == kFont;
}
inline void Argument::set_has_font() {
  _oneof_case_[0] = kFont;
}
inline void Argument::clear_font() {
  if (has_font()) {
    value_.font_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Argument::font() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.font)
  if (has_font()) {
    return value_.font_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Argument::set_font(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.font)
  if (!has_font()) {
    clear_value();
    set_has_font();
    value_.font_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.font_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.font)
}
#if LANG_CXX11
inline void Argument::set_font(::std::string&& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.font)
  if (!has_font()) {
    clear_value();
    set_has_font();
    value_.font_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.font_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Argument.font)
}
#endif
inline void Argument::set_font(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_font()) {
    clear_value();
    set_has_font();
    value_.font_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.font_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Argument.font)
}
inline void Argument::set_font(const char* value, size_t size) {
  if (!has_font()) {
    clear_value();
    set_has_font();
    value_.font_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.font_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Argument.font)
}
inline ::std::string* Argument::mutable_font() {
  if (!has_font()) {
    clear_value();
    set_has_font();
    value_.font_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:buffers.resources.Argument.font)
  return value_.font_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_font() {
  // @@protoc_insertion_point(field_release:buffers.resources.Argument.font)
  if (has_font()) {
    clear_has_value();
    return value_.font_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Argument::set_allocated_font(::std::string* font) {
  if (!has_font()) {
    value_.font_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (font != NULL) {
    set_has_font();
    value_.font_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        font);
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Argument.font)
}

// optional string timeline = 11;
inline bool Argument::has_timeline() const {
  return value_case() == kTimeline;
}
inline void Argument::set_has_timeline() {
  _oneof_case_[0] = kTimeline;
}
inline void Argument::clear_timeline() {
  if (has_timeline()) {
    value_.timeline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Argument::timeline() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.timeline)
  if (has_timeline()) {
    return value_.timeline_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Argument::set_timeline(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.timeline)
  if (!has_timeline()) {
    clear_value();
    set_has_timeline();
    value_.timeline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.timeline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.timeline)
}
#if LANG_CXX11
inline void Argument::set_timeline(::std::string&& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.timeline)
  if (!has_timeline()) {
    clear_value();
    set_has_timeline();
    value_.timeline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.timeline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Argument.timeline)
}
#endif
inline void Argument::set_timeline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_timeline()) {
    clear_value();
    set_has_timeline();
    value_.timeline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.timeline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Argument.timeline)
}
inline void Argument::set_timeline(const char* value, size_t size) {
  if (!has_timeline()) {
    clear_value();
    set_has_timeline();
    value_.timeline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.timeline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Argument.timeline)
}
inline ::std::string* Argument::mutable_timeline() {
  if (!has_timeline()) {
    clear_value();
    set_has_timeline();
    value_.timeline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:buffers.resources.Argument.timeline)
  return value_.timeline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_timeline() {
  // @@protoc_insertion_point(field_release:buffers.resources.Argument.timeline)
  if (has_timeline()) {
    clear_has_value();
    return value_.timeline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Argument::set_allocated_timeline(::std::string* timeline) {
  if (!has_timeline()) {
    value_.timeline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (timeline != NULL) {
    set_has_timeline();
    value_.timeline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        timeline);
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Argument.timeline)
}

inline bool Argument::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Argument::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Argument::ValueCase Argument::value_case() const {
  return Argument::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Action

// optional int32 libid = 1;
inline bool Action::has_libid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Action::set_has_libid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Action::clear_has_libid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Action::clear_libid() {
  libid_ = 0;
  clear_has_libid();
}
inline ::google::protobuf::int32 Action::libid() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.libid)
  return libid_;
}
inline void Action::set_libid(::google::protobuf::int32 value) {
  set_has_libid();
  libid_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.libid)
}

// optional int32 id = 2;
inline bool Action::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Action::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Action::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Action::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Action::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.id)
  return id_;
}
inline void Action::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.id)
}

// optional .buffers.resources.ActionKind kind = 3;
inline bool Action::has_kind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Action::set_has_kind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Action::clear_has_kind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Action::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::buffers::resources::ActionKind Action::kind() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.kind)
  return static_cast< ::buffers::resources::ActionKind >(kind_);
}
inline void Action::set_kind(::buffers::resources::ActionKind value) {
  assert(::buffers::resources::ActionKind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.kind)
}

// optional bool use_relative = 4 [(.buffers.gmx) = "userelative"];
inline bool Action::has_use_relative() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Action::set_has_use_relative() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Action::clear_has_use_relative() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Action::clear_use_relative() {
  use_relative_ = false;
  clear_has_use_relative();
}
inline bool Action::use_relative() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.use_relative)
  return use_relative_;
}
inline void Action::set_use_relative(bool value) {
  set_has_use_relative();
  use_relative_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.use_relative)
}

// optional bool is_question = 5 [(.buffers.gmx) = "isquestion"];
inline bool Action::has_is_question() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Action::set_has_is_question() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Action::clear_has_is_question() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Action::clear_is_question() {
  is_question_ = false;
  clear_has_is_question();
}
inline bool Action::is_question() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.is_question)
  return is_question_;
}
inline void Action::set_is_question(bool value) {
  set_has_is_question();
  is_question_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.is_question)
}

// optional bool use_apply_to = 6 [(.buffers.gmx) = "useapplyto"];
inline bool Action::has_use_apply_to() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Action::set_has_use_apply_to() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Action::clear_has_use_apply_to() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Action::clear_use_apply_to() {
  use_apply_to_ = false;
  clear_has_use_apply_to();
}
inline bool Action::use_apply_to() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.use_apply_to)
  return use_apply_to_;
}
inline void Action::set_use_apply_to(bool value) {
  set_has_use_apply_to();
  use_apply_to_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.use_apply_to)
}

// optional .buffers.resources.ActionExecution exe_type = 7 [(.buffers.gmx) = "exetype"];
inline bool Action::has_exe_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Action::set_has_exe_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Action::clear_has_exe_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Action::clear_exe_type() {
  exe_type_ = 0;
  clear_has_exe_type();
}
inline ::buffers::resources::ActionExecution Action::exe_type() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.exe_type)
  return static_cast< ::buffers::resources::ActionExecution >(exe_type_);
}
inline void Action::set_exe_type(::buffers::resources::ActionExecution value) {
  assert(::buffers::resources::ActionExecution_IsValid(value));
  set_has_exe_type();
  exe_type_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.exe_type)
}

// optional string function_name = 8 [(.buffers.gmx) = "functionname"];
inline bool Action::has_function_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_function_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_function_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_function_name();
}
inline const ::std::string& Action::function_name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.function_name)
  return function_name_.GetNoArena();
}
inline void Action::set_function_name(const ::std::string& value) {
  set_has_function_name();
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Action.function_name)
}
#if LANG_CXX11
inline void Action::set_function_name(::std::string&& value) {
  set_has_function_name();
  function_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Action.function_name)
}
#endif
inline void Action::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_function_name();
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Action.function_name)
}
inline void Action::set_function_name(const char* value, size_t size) {
  set_has_function_name();
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Action.function_name)
}
inline ::std::string* Action::mutable_function_name() {
  set_has_function_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Action.function_name)
  return function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_function_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Action.function_name)
  clear_has_function_name();
  return function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_function_name(::std::string* function_name) {
  if (function_name != NULL) {
    set_has_function_name();
  } else {
    clear_has_function_name();
  }
  function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Action.function_name)
}

// optional string code_string = 9 [(.buffers.gmx) = "codestring"];
inline bool Action::has_code_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_code_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_code_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_code_string() {
  code_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code_string();
}
inline const ::std::string& Action::code_string() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.code_string)
  return code_string_.GetNoArena();
}
inline void Action::set_code_string(const ::std::string& value) {
  set_has_code_string();
  code_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Action.code_string)
}
#if LANG_CXX11
inline void Action::set_code_string(::std::string&& value) {
  set_has_code_string();
  code_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Action.code_string)
}
#endif
inline void Action::set_code_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code_string();
  code_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Action.code_string)
}
inline void Action::set_code_string(const char* value, size_t size) {
  set_has_code_string();
  code_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Action.code_string)
}
inline ::std::string* Action::mutable_code_string() {
  set_has_code_string();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Action.code_string)
  return code_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_code_string() {
  // @@protoc_insertion_point(field_release:buffers.resources.Action.code_string)
  clear_has_code_string();
  return code_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_code_string(::std::string* code_string) {
  if (code_string != NULL) {
    set_has_code_string();
  } else {
    clear_has_code_string();
  }
  code_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code_string);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Action.code_string)
}

// optional string who_name = 10 [(.buffers.gmx) = "whoName"];
inline bool Action::has_who_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::set_has_who_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Action::clear_has_who_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Action::clear_who_name() {
  who_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_who_name();
}
inline const ::std::string& Action::who_name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.who_name)
  return who_name_.GetNoArena();
}
inline void Action::set_who_name(const ::std::string& value) {
  set_has_who_name();
  who_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Action.who_name)
}
#if LANG_CXX11
inline void Action::set_who_name(::std::string&& value) {
  set_has_who_name();
  who_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Action.who_name)
}
#endif
inline void Action::set_who_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_who_name();
  who_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Action.who_name)
}
inline void Action::set_who_name(const char* value, size_t size) {
  set_has_who_name();
  who_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Action.who_name)
}
inline ::std::string* Action::mutable_who_name() {
  set_has_who_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Action.who_name)
  return who_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_who_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Action.who_name)
  clear_has_who_name();
  return who_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_who_name(::std::string* who_name) {
  if (who_name != NULL) {
    set_has_who_name();
  } else {
    clear_has_who_name();
  }
  who_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), who_name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Action.who_name)
}

// optional bool relative = 11;
inline bool Action::has_relative() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Action::set_has_relative() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Action::clear_has_relative() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Action::clear_relative() {
  relative_ = false;
  clear_has_relative();
}
inline bool Action::relative() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.relative)
  return relative_;
}
inline void Action::set_relative(bool value) {
  set_has_relative();
  relative_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.relative)
}

// optional bool is_not = 12 [(.buffers.gmx) = "isnot"];
inline bool Action::has_is_not() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Action::set_has_is_not() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Action::clear_has_is_not() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Action::clear_is_not() {
  is_not_ = false;
  clear_has_is_not();
}
inline bool Action::is_not() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.is_not)
  return is_not_;
}
inline void Action::set_is_not(bool value) {
  set_has_is_not();
  is_not_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.is_not)
}

// repeated .buffers.resources.Argument arguments = 13 [(.buffers.gmx) = "arguments/argument"];
inline int Action::arguments_size() const {
  return arguments_.size();
}
inline void Action::clear_arguments() {
  arguments_.Clear();
}
inline const ::buffers::resources::Argument& Action::arguments(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.arguments)
  return arguments_.Get(index);
}
inline ::buffers::resources::Argument* Action::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Action.arguments)
  return arguments_.Mutable(index);
}
inline ::buffers::resources::Argument* Action::add_arguments() {
  // @@protoc_insertion_point(field_add:buffers.resources.Action.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::buffers::resources::Argument >*
Action::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Action.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Argument >&
Action::arguments() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Action.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// Event

// optional int32 type = 1 [(.buffers.gmx) = "eventtype"];
inline bool Event::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Event::type() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Event.type)
  return type_;
}
inline void Event::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Event.type)
}

// optional int32 number = 2 [(.buffers.gmx) = "enumb"];
inline bool Event::has_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 Event::number() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Event.number)
  return number_;
}
inline void Event::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Event.number)
}

// optional string name = 3 [(.buffers.gmx) = "ename"];
inline bool Event::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Event::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Event.name)
  return name_.GetNoArena();
}
inline void Event::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Event.name)
}
#if LANG_CXX11
inline void Event::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Event.name)
}
#endif
inline void Event::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Event.name)
}
inline void Event::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Event.name)
}
inline ::std::string* Event::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Event.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Event.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Event.name)
}

// repeated .buffers.resources.Action actions = 4 [(.buffers.gmx) = "action"];
inline int Event::actions_size() const {
  return actions_.size();
}
inline void Event::clear_actions() {
  actions_.Clear();
}
inline const ::buffers::resources::Action& Event::actions(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Event.actions)
  return actions_.Get(index);
}
inline ::buffers::resources::Action* Event::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Event.actions)
  return actions_.Mutable(index);
}
inline ::buffers::resources::Action* Event::add_actions() {
  // @@protoc_insertion_point(field_add:buffers.resources.Event.actions)
  return actions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::buffers::resources::Action >*
Event::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Event.actions)
  return &actions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Action >&
Event::actions() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Event.actions)
  return actions_;
}

// optional string code = 5;
inline bool Event::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Event::code() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Event.code)
  return code_.GetNoArena();
}
inline void Event::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Event.code)
}
#if LANG_CXX11
inline void Event::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Event.code)
}
#endif
inline void Event::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Event.code)
}
inline void Event::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Event.code)
}
inline ::std::string* Event::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Event.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_code() {
  // @@protoc_insertion_point(field_release:buffers.resources.Event.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Event.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resources
}  // namespace buffers

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::buffers::resources::ArgumentKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::buffers::resources::ArgumentKind>() {
  return ::buffers::resources::ArgumentKind_descriptor();
}
template <> struct is_proto_enum< ::buffers::resources::ActionKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::buffers::resources::ActionKind>() {
  return ::buffers::resources::ActionKind_descriptor();
}
template <> struct is_proto_enum< ::buffers::resources::ActionExecution> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::buffers::resources::ActionExecution>() {
  return ::buffers::resources::ActionExecution_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_resources_2fEvent_2eproto__INCLUDED
